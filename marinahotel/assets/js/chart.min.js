// مكتبة Chart.js مبسطة - إصدار محلي لفندق مارينا
class Chart {
    constructor(ctx, config) {
        this.ctx = ctx;
        this.canvas = ctx.canvas;
        this.config = config;
        this.data = config.data;
        this.options = config.options || {};
        this.type = config.type;
        
        this.init();
    }
    
    init() {
        this.setupCanvas();
        this.draw();
    }
    
    setupCanvas() {
        const rect = this.canvas.getBoundingClientRect();
        this.canvas.width = rect.width * 2;
        this.canvas.height = rect.height * 2;
        this.ctx.scale(2, 2);
        this.canvas.style.width = rect.width + 'px';
        this.canvas.style.height = rect.height + 'px';
    }
    
    draw() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        switch (this.type) {
            case 'line':
                this.drawLineChart();
                break;
            case 'bar':
                this.drawBarChart();
                break;
            case 'pie':
                this.drawPieChart();
                break;
            case 'doughnut':
                this.drawDoughnutChart();
                break;
            default:
                this.drawBarChart();
        }
        
        if (this.options.plugins && this.options.plugins.legend && this.options.plugins.legend.display !== false) {
            this.drawLegend();
        }
    }
    
    drawLineChart() {
        const padding = 60;
        const width = this.canvas.width / 2 - padding * 2;
        const height = this.canvas.height / 2 - padding * 2;
        
        // رسم المحاور
        this.ctx.strokeStyle = '#ccc';
        this.ctx.lineWidth = 1;
        this.ctx.beginPath();
        this.ctx.moveTo(padding, padding);
        this.ctx.lineTo(padding, height + padding);
        this.ctx.lineTo(width + padding, height + padding);
        this.ctx.stroke();
        
        const labels = this.data.labels;
        const dataset = this.data.datasets[0];
        const values = dataset.data;
        
        if (values.length === 0) return;
        
        const maxValue = Math.max(...values);
        const minValue = Math.min(...values);
        const range = maxValue - minValue || 1;
        
        // رسم الخط
        this.ctx.strokeStyle = dataset.borderColor || '#007bff';
        this.ctx.lineWidth = 2;
        this.ctx.beginPath();
        
        for (let i = 0; i < values.length; i++) {
            const x = padding + (i / (values.length - 1)) * width;
            const y = padding + height - ((values[i] - minValue) / range) * height;
            
            if (i === 0) {
                this.ctx.moveTo(x, y);
            } else {
                this.ctx.lineTo(x, y);
            }
        }
        this.ctx.stroke();
        
        // رسم النقاط
        this.ctx.fillStyle = dataset.backgroundColor || dataset.borderColor || '#007bff';
        for (let i = 0; i < values.length; i++) {
            const x = padding + (i / (values.length - 1)) * width;
            const y = padding + height - ((values[i] - minValue) / range) * height;
            
            this.ctx.beginPath();
            this.ctx.arc(x, y, 4, 0, 2 * Math.PI);
            this.ctx.fill();
        }
        
        // إضافة التسميات
        this.drawAxesLabels(labels, values, padding, width, height);
    }
    
    drawBarChart() {
        const padding = 60;
        const width = this.canvas.width / 2 - padding * 2;
        const height = this.canvas.height / 2 - padding * 2;
        
        // رسم المحاور
        this.ctx.strokeStyle = '#ccc';
        this.ctx.lineWidth = 1;
        this.ctx.beginPath();
        this.ctx.moveTo(padding, padding);
        this.ctx.lineTo(padding, height + padding);
        this.ctx.lineTo(width + padding, height + padding);
        this.ctx.stroke();
        
        const labels = this.data.labels;
        const dataset = this.data.datasets[0];
        const values = dataset.data;
        
        if (values.length === 0) return;
        
        const maxValue = Math.max(...values);
        const barWidth = width / values.length * 0.8;
        const barSpacing = width / values.length * 0.2;
        
        // رسم الأعمدة
        this.ctx.fillStyle = dataset.backgroundColor || '#007bff';
        
        for (let i = 0; i < values.length; i++) {
            const barHeight = (values[i] / maxValue) * height;
            const x = padding + i * (barWidth + barSpacing) + barSpacing / 2;
            const y = padding + height - barHeight;
            
            this.ctx.fillRect(x, y, barWidth, barHeight);
        }
        
        // إضافة التسميات
        this.drawAxesLabels(labels, values, padding, width, height);
    }
    
    drawPieChart() {
        const centerX = this.canvas.width / 4;
        const centerY = this.canvas.height / 4;
        const radius = Math.min(centerX, centerY) - 40;
        
        const dataset = this.data.datasets[0];
        const values = dataset.data;
        const total = values.reduce((sum, value) => sum + value, 0);
        
        let currentAngle = -Math.PI / 2;
        
        const colors = dataset.backgroundColor || this.generateColors(values.length);
        
        for (let i = 0; i < values.length; i++) {
            const sliceAngle = (values[i] / total) * 2 * Math.PI;
            
            this.ctx.fillStyle = colors[i] || colors[i % colors.length];
            this.ctx.beginPath();
            this.ctx.moveTo(centerX, centerY);
            this.ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
            this.ctx.closePath();
            this.ctx.fill();
            
            currentAngle += sliceAngle;
        }
    }
    
    drawDoughnutChart() {
        const centerX = this.canvas.width / 4;
        const centerY = this.canvas.height / 4;
        const outerRadius = Math.min(centerX, centerY) - 40;
        const innerRadius = outerRadius * 0.6;
        
        const dataset = this.data.datasets[0];
        const values = dataset.data;
        const total = values.reduce((sum, value) => sum + value, 0);
        
        let currentAngle = -Math.PI / 2;
        
        const colors = dataset.backgroundColor || this.generateColors(values.length);
        
        for (let i = 0; i < values.length; i++) {
            const sliceAngle = (values[i] / total) * 2 * Math.PI;
            
            this.ctx.fillStyle = colors[i] || colors[i % colors.length];
            this.ctx.beginPath();
            this.ctx.arc(centerX, centerY, outerRadius, currentAngle, currentAngle + sliceAngle);
            this.ctx.arc(centerX, centerY, innerRadius, currentAngle + sliceAngle, currentAngle, true);
            this.ctx.closePath();
            this.ctx.fill();
            
            currentAngle += sliceAngle;
        }
    }
    
    drawAxesLabels(labels, values, padding, width, height) {
        this.ctx.fillStyle = '#666';
        this.ctx.font = '12px Arial';
        this.ctx.textAlign = 'center';
        
        // تسميات المحور السيني
        for (let i = 0; i < labels.length; i++) {
            const x = padding + (i / (labels.length - 1)) * width;
            const y = height + padding + 20;
            this.ctx.fillText(labels[i], x, y);
        }
        
        // تسميات المحور الصادي
        const maxValue = Math.max(...values);
        const steps = 5;
        this.ctx.textAlign = 'right';
        
        for (let i = 0; i <= steps; i++) {
            const value = (maxValue / steps) * i;
            const y = padding + height - (i / steps) * height;
            this.ctx.fillText(Math.round(value).toLocaleString(), padding - 10, y + 4);
        }
    }
    
    drawLegend() {
        const legendY = this.canvas.height / 2 - 40;
        const legendX = 20;
        const itemHeight = 20;
        
        this.ctx.font = '14px Arial';
        this.ctx.textAlign = 'left';
        
        const labels = this.data.labels;
        const dataset = this.data.datasets[0];
        const colors = dataset.backgroundColor || this.generateColors(labels.length);
        
        for (let i = 0; i < labels.length; i++) {
            const y = legendY + i * itemHeight;
            
            // رسم المربع الملون
            this.ctx.fillStyle = colors[i] || colors[i % colors.length];
            this.ctx.fillRect(legendX, y - 8, 12, 12);
            
            // رسم النص
            this.ctx.fillStyle = '#333';
            this.ctx.fillText(labels[i], legendX + 20, y);
        }
    }
    
    generateColors(count) {
        const colors = [
            '#007bff', '#28a745', '#dc3545', '#ffc107', '#17a2b8',
            '#6f42c1', '#e83e8c', '#fd7e14', '#20c997', '#6c757d'
        ];
        
        return Array.from({length: count}, (_, i) => colors[i % colors.length]);
    }
    
    update() {
        this.draw();
    }
    
    destroy() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
}

// إضافة Chart إلى النطاق العالمي
window.Chart = Chart;