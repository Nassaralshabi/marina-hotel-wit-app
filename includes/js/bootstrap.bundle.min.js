/*!
 * Bootstrap v5.3.0 (https://getbootstrap.com/)
 * Copyright 2011-2023 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.bootstrap = factory());
})(this, (function () { 'use strict';

  // Toast Component
  class Toast {
    constructor(element, config = {}) {
      this._element = element;
      this._config = {
        delay: config.delay || 5000,
        autohide: config.autohide !== false
      };
      this._timeout = null;
      this._isShown = false;
    }

    show() {
      if (this._isShown) return;

      this._isShown = true;
      this._element.classList.add('show');
      this._element.style.display = 'block';

      if (this._config.autohide) {
        this._setTimeout(() => this.hide(), this._config.delay);
      }

      // Trigger shown event
      this._element.dispatchEvent(new Event('shown.bs.toast'));
    }

    hide() {
      if (!this._isShown) return;

      this._isShown = false;
      this._element.classList.remove('show');
      
      setTimeout(() => {
        this._element.style.display = 'none';
      }, 150);

      this._clearTimeout();
      
      // Trigger hidden event
      this._element.dispatchEvent(new Event('hidden.bs.toast'));
    }

    dispose() {
      this._clearTimeout();
      this._element = null;
      this._config = null;
    }

    _setTimeout(handler, timeout) {
      this._clearTimeout();
      this._timeout = setTimeout(handler, timeout);
    }

    _clearTimeout() {
      if (this._timeout) {
        clearTimeout(this._timeout);
        this._timeout = null;
      }
    }

    static getInstance(element) {
      return element._bsToast || null;
    }

    static getOrCreateInstance(element, config) {
      return element._bsToast || new Toast(element, config);
    }
  }

  // Modal Component
  class Modal {
    constructor(element, config = {}) {
      this._element = element;
      this._config = {
        backdrop: config.backdrop !== false,
        keyboard: config.keyboard !== false,
        focus: config.focus !== false
      };
      this._isShown = false;
      this._backdrop = null;
      this._init();
    }

    _init() {
      // Add close button event
      const closeBtn = this._element.querySelector('[data-bs-dismiss="modal"]');
      if (closeBtn) {
        closeBtn.addEventListener('click', () => this.hide());
      }

      // Add backdrop click event
      this._element.addEventListener('click', (e) => {
        if (e.target === this._element && this._config.backdrop) {
          this.hide();
        }
      });

      // Add escape key event
      if (this._config.keyboard) {
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && this._isShown) {
            this.hide();
          }
        });
      }
    }

    show() {
      if (this._isShown) return;

      this._isShown = true;
      document.body.classList.add('modal-open');
      
      this._showBackdrop();
      this._element.style.display = 'block';
      this._element.classList.add('show');

      if (this._config.focus) {
        this._element.focus();
      }

      // Trigger shown event
      this._element.dispatchEvent(new Event('shown.bs.modal'));
    }

    hide() {
      if (!this._isShown) return;

      this._isShown = false;
      this._element.classList.remove('show');
      
      setTimeout(() => {
        this._element.style.display = 'none';
        this._hideBackdrop();
        document.body.classList.remove('modal-open');
      }, 150);

      // Trigger hidden event
      this._element.dispatchEvent(new Event('hidden.bs.modal'));
    }

    _showBackdrop() {
      if (!this._config.backdrop) return;

      this._backdrop = document.createElement('div');
      this._backdrop.className = 'modal-backdrop fade show';
      document.body.appendChild(this._backdrop);
    }

    _hideBackdrop() {
      if (this._backdrop) {
        this._backdrop.remove();
        this._backdrop = null;
      }
    }

    static getInstance(element) {
      return element._bsModal || null;
    }

    static getOrCreateInstance(element, config) {
      return element._bsModal || new Modal(element, config);
    }
  }

  // Dropdown Component
  class Dropdown {
    constructor(element, config = {}) {
      this._element = element;
      this._menu = this._getMenuElement();
      this._isShown = false;
      this._init();
    }

    _init() {
      this._element.addEventListener('click', (e) => {
        e.preventDefault();
        this.toggle();
      });

      document.addEventListener('click', (e) => {
        if (!this._element.contains(e.target) && !this._menu.contains(e.target)) {
          this.hide();
        }
      });
    }

    _getMenuElement() {
      const selector = this._element.getAttribute('data-bs-target') || 
                      this._element.getAttribute('href');
      return selector ? document.querySelector(selector) : 
             this._element.nextElementSibling;
    }

    show() {
      if (this._isShown) return;

      this._isShown = true;
      this._menu.classList.add('show');
      this._element.setAttribute('aria-expanded', 'true');

      // Trigger shown event
      this._element.dispatchEvent(new Event('shown.bs.dropdown'));
    }

    hide() {
      if (!this._isShown) return;

      this._isShown = false;
      this._menu.classList.remove('show');
      this._element.setAttribute('aria-expanded', 'false');

      // Trigger hidden event
      this._element.dispatchEvent(new Event('hidden.bs.dropdown'));
    }

    toggle() {
      if (this._isShown) {
        this.hide();
      } else {
        this.show();
      }
    }

    static getInstance(element) {
      return element._bsDropdown || null;
    }

    static getOrCreateInstance(element, config) {
      return element._bsDropdown || new Dropdown(element, config);
    }
  }

  // Collapse Component
  class Collapse {
    constructor(element, config = {}) {
      this._element = element;
      this._isShown = element.classList.contains('show');
      this._triggers = document.querySelectorAll(`[data-bs-target="#${element.id}"], [href="#${element.id}"]`);
      this._init();
    }

    _init() {
      this._triggers.forEach(trigger => {
        trigger.addEventListener('click', (e) => {
          e.preventDefault();
          this.toggle();
        });
      });
    }

    show() {
      if (this._isShown) return;

      this._isShown = true;
      this._element.style.height = '0px';
      this._element.classList.add('collapsing');
      this._element.classList.remove('collapse');

      const height = this._element.scrollHeight;
      this._element.style.height = height + 'px';

      setTimeout(() => {
        this._element.classList.remove('collapsing');
        this._element.classList.add('collapse', 'show');
        this._element.style.height = '';
      }, 350);

      this._updateTriggers(true);

      // Trigger shown event
      this._element.dispatchEvent(new Event('shown.bs.collapse'));
    }

    hide() {
      if (!this._isShown) return;

      this._isShown = false;
      this._element.style.height = this._element.scrollHeight + 'px';
      this._element.classList.add('collapsing');
      this._element.classList.remove('collapse', 'show');

      setTimeout(() => {
        this._element.style.height = '0px';
      }, 10);

      setTimeout(() => {
        this._element.classList.remove('collapsing');
        this._element.classList.add('collapse');
        this._element.style.height = '';
      }, 350);

      this._updateTriggers(false);

      // Trigger hidden event
      this._element.dispatchEvent(new Event('hidden.bs.collapse'));
    }

    toggle() {
      if (this._isShown) {
        this.hide();
      } else {
        this.show();
      }
    }

    _updateTriggers(isShown) {
      this._triggers.forEach(trigger => {
        trigger.setAttribute('aria-expanded', isShown);
        if (isShown) {
          trigger.classList.remove('collapsed');
        } else {
          trigger.classList.add('collapsed');
        }
      });
    }

    static getInstance(element) {
      return element._bsCollapse || null;
    }

    static getOrCreateInstance(element, config) {
      return element._bsCollapse || new Collapse(element, config);
    }
  }

  // Alert Component
  class Alert {
    constructor(element) {
      this._element = element;
      this._init();
    }

    _init() {
      const closeBtn = this._element.querySelector('[data-bs-dismiss="alert"]');
      if (closeBtn) {
        closeBtn.addEventListener('click', () => this.close());
      }
    }

    close() {
      this._element.classList.add('fade');
      
      setTimeout(() => {
        this._element.remove();
        // Trigger closed event
        document.dispatchEvent(new Event('closed.bs.alert'));
      }, 150);
    }

    static getInstance(element) {
      return element._bsAlert || null;
    }

    static getOrCreateInstance(element) {
      return element._bsAlert || new Alert(element);
    }
  }

  // Tab Component
  class Tab {
    constructor(element) {
      this._element = element;
      this._init();
    }

    _init() {
      this._element.addEventListener('click', (e) => {
        e.preventDefault();
        this.show();
      });
    }

    show() {
      const target = this._getTarget();
      if (!target) return;

      // Hide all tabs
      const tabsContainer = this._element.closest('[role="tablist"]');
      if (tabsContainer) {
        const allTabs = tabsContainer.querySelectorAll('[role="tab"]');
        allTabs.forEach(tab => {
          tab.classList.remove('active');
          tab.setAttribute('aria-selected', 'false');
          const tabTarget = this._getTargetFromElement(tab);
          if (tabTarget) {
            tabTarget.classList.remove('show', 'active');
          }
        });
      }

      // Show current tab
      this._element.classList.add('active');
      this._element.setAttribute('aria-selected', 'true');
      target.classList.add('show', 'active');

      // Trigger shown event
      this._element.dispatchEvent(new Event('shown.bs.tab'));
    }

    _getTarget() {
      return this._getTargetFromElement(this._element);
    }

    _getTargetFromElement(element) {
      const selector = element.getAttribute('data-bs-target') || 
                      element.getAttribute('href');
      return selector ? document.querySelector(selector) : null;
    }

    static getInstance(element) {
      return element._bsTab || null;
    }

    static getOrCreateInstance(element) {
      return element._bsTab || new Tab(element);
    }
  }

  // Auto-initialization
  const initializeComponents = () => {
    // Initialize Toasts
    document.querySelectorAll('.toast').forEach(el => {
      if (!el._bsToast) {
        el._bsToast = new Toast(el);
      }
    });

    // Initialize Modals
    document.querySelectorAll('.modal').forEach(el => {
      if (!el._bsModal) {
        el._bsModal = new Modal(el);
      }
    });

    // Initialize Dropdowns
    document.querySelectorAll('[data-bs-toggle="dropdown"]').forEach(el => {
      if (!el._bsDropdown) {
        el._bsDropdown = new Dropdown(el);
      }
    });

    // Initialize Collapses
    document.querySelectorAll('.collapse').forEach(el => {
      if (!el._bsCollapse) {
        el._bsCollapse = new Collapse(el);
      }
    });

    // Initialize Alerts
    document.querySelectorAll('.alert').forEach(el => {
      if (!el._bsAlert) {
        el._bsAlert = new Alert(el);
      }
    });

    // Initialize Tabs
    document.querySelectorAll('[data-bs-toggle="tab"]').forEach(el => {
      if (!el._bsTab) {
        el._bsTab = new Tab(el);
      }
    });
  };

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeComponents);
  } else {
    initializeComponents();
  }

  // Utility functions
  const Util = {
    reflow: (element) => {
      return element.offsetHeight;
    },
    
    getTransitionDurationFromElement: (element) => {
      if (!element) return 0;
      
      let { transitionDuration, transitionDelay } = window.getComputedStyle(element);
      
      const floatTransitionDuration = Number.parseFloat(transitionDuration);
      const floatTransitionDelay = Number.parseFloat(transitionDelay);
      
      if (!floatTransitionDuration && !floatTransitionDelay) {
        return 0;
      }
      
      transitionDuration = transitionDuration.split(',')[0];
      transitionDelay = transitionDelay.split(',')[0];
      
      return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * 1000;
    }
  };

  // Export components
  return {
    Toast,
    Modal,
    Dropdown,
    Collapse,
    Alert,
    Tab,
    Util
  };

}));/*!
 * Bootstrap v5.3.0 (https://getbootstrap.com/)
 * Copyright 2011-2023 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.bootstrap = factory());
})(this, (function () { 'use strict';

  // Toast Component
  class Toast {
    constructor(element, config = {}) {
      this._element = element;
      this._config = {
        delay: config.delay || 5000,
        autohide: config.autohide !== false
      };
      this._timeout = null;
      this._isShown = false;
    }

    show() {
      if (this._isShown) return;

      this._isShown = true;
      this._element.classList.add('show');
      this._element.style.display = 'block';

      if (this._config.autohide) {
        this._setTimeout(() => this.hide(), this._config.delay);
      }

      // Trigger shown event
      this._element.dispatchEvent(new Event('shown.bs.toast'));
    }

    hide() {
      if (!this._isShown) return;

      this._isShown = false;
      this._element.classList.remove('show');
      
      setTimeout(() => {
        this._element.style.display = 'none';
      }, 150);

      this._clearTimeout();
      
      // Trigger hidden event
      this._element.dispatchEvent(new Event('hidden.bs.toast'));
    }

    dispose() {
      this._clearTimeout();
      this._element = null;
      this._config = null;
    }

    _setTimeout(handler, timeout) {
      this._clearTimeout();
      this._timeout = setTimeout(handler, timeout);
    }

    _clearTimeout() {
      if (this._timeout) {
        clearTimeout(this._timeout);
        this._timeout = null;
      }
    }

    static getInstance(element) {
      return element._bsToast || null;
    }

    static getOrCreateInstance(element, config) {
      return element._bsToast || new Toast(element, config);
    }
  }

  // Modal Component
  class Modal {
    constructor(element, config = {}) {
      this._element = element;
      this._config = {
        backdrop: config.backdrop !== false,
        keyboard: config.keyboard !== false,
        focus: config.focus !== false
      };
      this._isShown = false;
      this._backdrop = null;
      this._init();
    }

    _init() {
      // Add close button event
      const closeBtn = this._element.querySelector('[data-bs-dismiss="modal"]');
      if (closeBtn) {
        closeBtn.addEventListener('click', () => this.hide());
      }

      // Add backdrop click event
      this._element.addEventListener('click', (e) => {
        if (e.target === this._element && this._config.backdrop) {
          this.hide();
        }
      });

      // Add escape key event
      if (this._config.keyboard) {
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && this._isShown) {
            this.hide();
          }
        });
      }
    }

    show() {
      if (this._isShown) return;

      this._isShown = true;
      document.body.classList.add('modal-open');
      
      this._showBackdrop();
      this._element.style.display = 'block';
      this._element.classList.add('show');

      if (this._config.focus) {
        this._element.focus();
      }

      // Trigger shown event
      this._element.dispatchEvent(new Event('shown.bs.modal'));
    }

    hide() {
      if (!this._isShown) return;

      this._isShown = false;
      this._element.classList.remove('show');
      
      setTimeout(() => {
        this._element.style.display = 'none';
        this._hideBackdrop();
        document.body.classList.remove('modal-open');
      }, 150);

      // Trigger hidden event
      this._element.dispatchEvent(new Event('hidden.bs.modal'));
    }

    _showBackdrop() {
      if (!this._config.backdrop) return;

      this._backdrop = document.createElement('div');
      this._backdrop.className = 'modal-backdrop fade show';
      document.body.appendChild(this._backdrop);
    }

    _hideBackdrop() {
      if (this._backdrop) {
        this._backdrop.remove();
        this._backdrop = null;
      }
    }

    static getInstance(element) {
      return element._bsModal || null;
    }

    static getOrCreateInstance(element, config) {
      return element._bsModal || new Modal(element, config);
    }
  }

  // Dropdown Component
  class Dropdown {
    constructor(element, config = {}) {
      this._element = element;
      this._menu = this._getMenuElement();
      this._isShown = false;
      this._init();
    }

    _init() {
      this._element.addEventListener('click', (e) => {
        e.preventDefault();
        this.toggle();
      });

      document.addEventListener('click', (e) => {
        if (!this._element.contains(e.target) && !this._menu.contains(e.target)) {
          this.hide();
        }
      });
    }

    _getMenuElement() {
      const selector = this._element.getAttribute('data-bs-target') || 
                      this._element.getAttribute('href');
      return selector ? document.querySelector(selector) : 
             this._element.nextElementSibling;
    }

    show() {
      if (this._isShown) return;

      this._isShown = true;
      this._menu.classList.add('show');
      this._element.setAttribute('aria-expanded', 'true');

      // Trigger shown event
      this._element.dispatchEvent(new Event('shown.bs.dropdown'));
    }

    hide() {
      if (!this._isShown) return;

      this._isShown = false;
      this._menu.classList.remove('show');
      this._element.setAttribute('aria-expanded', 'false');

      // Trigger hidden event
      this._element.dispatchEvent(new Event('hidden.bs.dropdown'));
    }

    toggle() {
      if (this._isShown) {
        this.hide();
      } else {
        this.show();
      }
    }

    static getInstance(element) {
      return element._bsDropdown || null;
    }

    static getOrCreateInstance(element, config) {
      return element._bsDropdown || new Dropdown(element, config);
    }
  }

  // Collapse Component
  class Collapse {
    constructor(element, config = {}) {
      this._element = element;
      this._isShown = element.classList.contains('show');
      this._triggers = document.querySelectorAll(`[data-bs-target="#${element.id}"], [href="#${element.id}"]`);
      this._init();
    }

    _init() {
      this._triggers.forEach(trigger => {
        trigger.addEventListener('click', (e) => {
          e.preventDefault();
          this.toggle();
        });
      });
    }

    show() {
      if (this._isShown) return;

      this._isShown = true;
      this._element.style.height = '0px';
      this._element.classList.add('collapsing');
      this._element.classList.remove('collapse');

      const height = this._element.scrollHeight;
      this._element.style.height = height + 'px';

      setTimeout(() => {
        this._element.classList.remove('collapsing');
        this._element.classList.add('collapse', 'show');
        this._element.style.height = '';
      }, 350);

      this._updateTriggers(true);

      // Trigger shown event
      this._element.dispatchEvent(new Event('shown.bs.collapse'));
    }

    hide() {
      if (!this._isShown) return;

      this._isShown = false;
      this._element.style.height = this._element.scrollHeight + 'px';
      this._element.classList.add('collapsing');
      this._element.classList.remove('collapse', 'show');

      setTimeout(() => {
        this._element.style.height = '0px';
      }, 10);

      setTimeout(() => {
        this._element.classList.remove('collapsing');
        this._element.classList.add('collapse');
        this._element.style.height = '';
      }, 350);

      this._updateTriggers(false);

      // Trigger hidden event
      this._element.dispatchEvent(new Event('hidden.bs.collapse'));
    }

    toggle() {
      if (this._isShown) {
        this.hide();
      } else {
        this.show();
      }
    }

    _updateTriggers(isShown) {
      this._triggers.forEach(trigger => {
        trigger.setAttribute('aria-expanded', isShown);
        if (isShown) {
          trigger.classList.remove('collapsed');
        } else {
          trigger.classList.add('collapsed');
        }
      });
    }

    static getInstance(element) {
      return element._bsCollapse || null;
    }

    static getOrCreateInstance(element, config) {
      return element._bsCollapse || new Collapse(element, config);
    }
  }

  // Alert Component
  class Alert {
    constructor(element) {
      this._element = element;
      this._init();
    }

    _init() {
      const closeBtn = this._element.querySelector('[data-bs-dismiss="alert"]');
      if (closeBtn) {
        closeBtn.addEventListener('click', () => this.close());
      }
    }

    close() {
      this._element.classList.add('fade');
      
      setTimeout(() => {
        this._element.remove();
        // Trigger closed event
        document.dispatchEvent(new Event('closed.bs.alert'));
      }, 150);
    }

    static getInstance(element) {
      return element._bsAlert || null;
    }

    static getOrCreateInstance(element) {
      return element._bsAlert || new Alert(element);
    }
  }

  // Tab Component
  class Tab {
    constructor(element) {
      this._element = element;
      this._init();
    }

    _init() {
      this._element.addEventListener('click', (e) => {
        e.preventDefault();
        this.show();
      });
    }

    show() {
      const target = this._getTarget();
      if (!target) return;

      // Hide all tabs
      const tabsContainer = this._element.closest('[role="tablist"]');
      if (tabsContainer) {
        const allTabs = tabsContainer.querySelectorAll('[role="tab"]');
        allTabs.forEach(tab => {
          tab.classList.remove('active');
          tab.setAttribute('aria-selected', 'false');
          const tabTarget = this._getTargetFromElement(tab);
          if (tabTarget) {
            tabTarget.classList.remove('show', 'active');
          }
        });
      }

      // Show current tab
      this._element.classList.add('active');
      this._element.setAttribute('aria-selected', 'true');
      target.classList.add('show', 'active');

      // Trigger shown event
      this._element.dispatchEvent(new Event('shown.bs.tab'));
    }

    _getTarget() {
      return this._getTargetFromElement(this._element);
    }

    _getTargetFromElement(element) {
      const selector = element.getAttribute('data-bs-target') || 
                      element.getAttribute('href');
      return selector ? document.querySelector(selector) : null;
    }

    static getInstance(element) {
      return element._bsTab || null;
    }

    static getOrCreateInstance(element) {
      return element._bsTab || new Tab(element);
    }
  }

  // Auto-initialization
  const initializeComponents = () => {
    // Initialize Toasts
    document.querySelectorAll('.toast').forEach(el => {
      if (!el._bsToast) {
        el._bsToast = new Toast(el);
      }
    });

    // Initialize Modals
    document.querySelectorAll('.modal').forEach(el => {
      if (!el._bsModal) {
        el._bsModal = new Modal(el);
      }
    });

    // Initialize Dropdowns
    document.querySelectorAll('[data-bs-toggle="dropdown"]').forEach(el => {
      if (!el._bsDropdown) {
        el._bsDropdown = new Dropdown(el);
      }
    });

    // Initialize Collapses
    document.querySelectorAll('.collapse').forEach(el => {
      if (!el._bsCollapse) {
        el._bsCollapse = new Collapse(el);
      }
    });

    // Initialize Alerts
    document.querySelectorAll('.alert').forEach(el => {
      if (!el._bsAlert) {
        el._bsAlert = new Alert(el);
      }
    });

    // Initialize Tabs
    document.querySelectorAll('[data-bs-toggle="tab"]').forEach(el => {
      if (!el._bsTab) {
        el._bsTab = new Tab(el);
      }
    });
  };

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeComponents);
  } else {
    initializeComponents();
  }

  // Utility functions
  const Util = {
    reflow: (element) => {
      return element.offsetHeight;
    },
    
    getTransitionDurationFromElement: (element) => {
      if (!element) return 0;
      
      let { transitionDuration, transitionDelay } = window.getComputedStyle(element);
      
      const floatTransitionDuration = Number.parseFloat(transitionDuration);
      const floatTransitionDelay = Number.parseFloat(transitionDelay);
      
      if (!floatTransitionDuration && !floatTransitionDelay) {
        return 0;
      }
      
      transitionDuration = transitionDuration.split(',')[0];
      transitionDelay = transitionDelay.split(',')[0];
      
      return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * 1000;
    }
  };

  // Export components
  return {
    Toast,
    Modal,
    Dropdown,
    Collapse,
    Alert,
    Tab,
    Util
  };

}));