name: Android Debug Build

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'bugfix/**'
      - 'capy/**'
    paths:
      - 'mobile/**'
      - '.github/workflows/android-debug.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'mobile/**'
  workflow_dispatch:
    inputs:
      base_api_url:
        description: 'BASE_API_URL for build (leave empty for default)'
        required: false
        default: ''

permissions:
  contents: read
  actions: read
  checks: write
  security-events: write
  id-token: write
  packages: read
  pull-requests: read
  dependency-graph: write

concurrency:
  group: android-debug-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-debug:
    name: Build Debug APK
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    env:
      FLUTTER_VERSION: '3.24.0'
      JAVA_VERSION: '17'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧹 تنظيف الكاش القديم (عند workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "🧹 تنظيف gradle cache..."
          rm -rf ~/.gradle/caches/ 2>/dev/null || true
          rm -rf ~/.gradle/wrapper/ 2>/dev/null || true
          echo "✅ تم تنظيف الكاش"

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          dependency-graph: generate-and-submit

      - name: Setup Flutter 3.24.0
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Flutter Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            mobile/.dart_tool
            mobile/build
          key: ${{ runner.os }}-flutter-debug-${{ hashFiles('mobile/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-debug-
            ${{ runner.os }}-flutter-

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            mobile/android/.gradle
          key: ${{ runner.os }}-gradle-debug-${{ hashFiles('mobile/android/gradle/wrapper/gradle-wrapper.properties', 'mobile/android/build.gradle', 'mobile/android/app/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-debug-
            ${{ runner.os }}-gradle-

      - name: Flutter Doctor
        run: flutter doctor -v

      - name: 🔍 فحص المتطلبات والبيئة
        run: |
          echo "=== 🔍 فحص المتطلبات ==="
          echo ""
          echo "📱 Flutter SDK:"
          which flutter && flutter --version || echo "❌ Flutter not found"
          echo ""
          echo "☕ Java version:"
          java -version 2>&1 | head -3
          echo ""
          echo "💾 Available disk space:"
          df -h | grep -E '^Filesystem|/$'
          echo ""
          echo "📂 Project structure:"
          ls -la
          echo ""
          echo "✅ فحص المتطلبات مكتمل"

      - name: Verify Project Structure
        working-directory: mobile
        run: |
          echo "Checking mobile directory structure..."
          ls -la
          if [ ! -d "android" ]; then
            echo "❌ Error: Android directory not found in mobile/"
            exit 1
          fi
          echo "✅ Android directory found"
          
          if [ ! -f "pubspec.yaml" ]; then
            echo "❌ Error: pubspec.yaml not found in mobile/"
            exit 1
          fi
          echo "✅ pubspec.yaml found"

      - name: Install Flutter Dependencies
        working-directory: mobile
        run: |
          echo "Getting Flutter dependencies..."
          flutter pub get
          echo "✅ Dependencies installed successfully"

      - name: Run Code Generation
        working-directory: mobile
        run: |
          echo "Running code generation..."
          flutter pub run build_runner build --delete-conflicting-outputs || echo "Code generation failed, continuing without it"
          echo "✅ Code generation step completed"

      - name: Build Debug APK
        working-directory: mobile
        timeout-minutes: 15
        env:
          BASE_API_URL: ${{ github.event.inputs.base_api_url || 'http://hotelmarina.com/MARINA_HOTEL_PORTABLE/api/v1' }}
        run: |
          echo "📱 بدء بناء Debug APK..."
          echo "🌐 استخدام BASE_API_URL: $BASE_API_URL"
          echo ""
          
          # تشغيل البناء مع معالجة الأخطاء
          set +e  # السماح بالأخطاء مؤقتاً للتشخيص
          
          flutter build apk --debug \
            --dart-define=BASE_API_URL=$BASE_API_URL \
            --build-name=debug-${{ github.run_number }} \
            --build-number=${{ github.run_number }} \
            --verbose
          
          BUILD_EXIT_CODE=$?
          set -e
          
          # فحص نتيجة البناء
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo ""
            echo "❌ فشل البناء - عرض معلومات تشخيصية:"
            echo "================================"
            echo ""
            echo "📂 محتويات مجلد build:"
            find build -type f 2>/dev/null | head -20 || echo "❌ مجلد build غير موجود"
            echo ""
            echo "📋 آخر 50 سطر من Gradle logs:"
            find android/.gradle -name "*.log" -type f -exec tail -50 {} \; 2>/dev/null || echo "❌ لا توجد gradle logs"
            echo ""
            echo "🔍 فحص اعتماديات pubspec:"
            cat pubspec.yaml | grep -A 20 "dependencies:" || true
            echo ""
            exit 1
          fi
          
          # التحقق من وجود APK
          APK_PATH="build/app/outputs/flutter-apk/app-debug.apk"
          if [ -f "$APK_PATH" ]; then
            echo ""
            echo "✅ تم بناء Debug APK بنجاح"
            echo "================================"
            ls -lh "$APK_PATH"
            
            APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
            APK_SIZE_BYTES=$(stat -c%s "$APK_PATH" 2>/dev/null || stat -f%z "$APK_PATH")
            
            echo "📦 حجم APK: $APK_SIZE ($APK_SIZE_BYTES bytes)"
            
            # فحص الحجم المنطقي
            if [ "$APK_SIZE_BYTES" -lt 5000000 ]; then
              echo "⚠️  تحذير: APK صغير جداً - قد يكون غير مكتمل"
              exit 1
            fi
            
            echo "APK_SIZE=$APK_SIZE" >> $GITHUB_ENV
            echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
          else
            echo ""
            echo "❌ فشل بناء APK - الملف غير موجود"
            echo "================================"
            echo "📂 محتويات build/app/outputs:"
            ls -laR build/app/outputs/ 2>/dev/null || echo "❌ المجلد غير موجود"
            exit 1
          fi

      - name: Generate Build Info
        working-directory: mobile
        env:
          BASE_API_URL: ${{ github.event.inputs.base_api_url || 'http://hotelmarina.com/MARINA_HOTEL_PORTABLE/api/v1' }}
        run: |
          APK_SIZE=$(du -h build/app/outputs/flutter-apk/app-debug.apk | cut -f1)
          echo "APK_SIZE=$APK_SIZE" >> $GITHUB_ENV
          
          BUILD_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
          
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          echo "COMMIT_SHORT=$COMMIT_SHORT" >> $GITHUB_ENV
          
          BRANCH_NAME=${{ github.ref_name }}
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: ✅ فحص صحة APK النهائي
        working-directory: mobile
        run: |
          echo "🔍 فحص صحة APK المُنتَج..."
          echo "================================"
          
          APK_PATH="${{ env.APK_PATH }}"
          
          if [ -z "$APK_PATH" ] || [ ! -f "$APK_PATH" ]; then
            echo "❌ APK path غير صحيح أو الملف غير موجود"
            echo "APK_PATH: $APK_PATH"
            exit 1
          fi
          
          # فحص الحجم
          SIZE=$(stat -c%s "$APK_PATH" 2>/dev/null || stat -f%z "$APK_PATH")
          MIN_SIZE=5000000  # 5 MB للـ debug
          
          if [ "$SIZE" -lt "$MIN_SIZE" ]; then
            echo "❌ فشل: حجم APK صغير جداً ($SIZE bytes < $MIN_SIZE bytes)"
            echo "⚠️  هذا يشير إلى أن البناء غير مكتمل"
            exit 1
          fi
          
          # فحص أن الملف APK صحيح (يبدأ بـ PK)
          if ! file "$APK_PATH" | grep -q "Zip archive"; then
            echo "❌ فشل: الملف ليس APK صحيح"
            file "$APK_PATH"
            exit 1
          fi
          
          echo "✅ APK صحيح وجاهز"
          echo "📦 الحجم: $SIZE bytes"
          echo "📁 المسار: $APK_PATH"

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: marina-hotel-debug-${{ env.BRANCH_NAME }}-${{ github.run_number }}-${{ env.COMMIT_SHORT }}
          path: mobile/build/app/outputs/flutter-apk/app-debug.apk
          retention-days: 14

      - name: Build Summary
        if: always()
        run: |
          echo "## 🧪 Marina Hotel Debug Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type:** Debug APK" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ env.BRANCH_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ env.COMMIT_SHORT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time:** ${{ env.BUILD_TIME }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ env.APK_SIZE }}" ]; then
            echo "- **APK Size:** ${{ env.APK_SIZE }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Build Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Build Status:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Test" >> $GITHUB_STEP_SUMMARY
          echo "This debug APK includes additional debugging information and can be installed alongside the release version." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Download" >> $GITHUB_STEP_SUMMARY
          echo "The debug APK is available in the workflow artifacts above." >> $GITHUB_STEP_SUMMARY

  # Quick validation job that runs in parallel
  validate-flutter:
    name: Validate Flutter Project
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'
          channel: 'stable'
          cache: true

      - name: Cache Flutter Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            mobile/.dart_tool
          key: ${{ runner.os }}-flutter-validate-${{ hashFiles('mobile/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-validate-

      - name: Install Dependencies
        working-directory: mobile
        run: flutter pub get

      - name: Run Flutter Analyze
        working-directory: mobile
        run: |
          echo "Running Flutter analyze..."
          flutter analyze --no-fatal-infos
          echo "✅ Analysis completed"

      - name: Check Formatting
        working-directory: mobile
        run: |
          echo "Checking code formatting..."
          dart format --output=none --set-exit-if-changed .
          echo "✅ Code formatting is correct"

      - name: Run Tests (if any)
        working-directory: mobile
        run: |
          echo "Running tests..."
          flutter test || echo "⚠️ No tests found or tests failed"
          echo "✅ Test check completed"