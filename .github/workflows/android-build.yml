name: Android Debug APK Build

on:
  # Automatic triggers
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'bugfix/**'
  
  pull_request:
    branches:
      - main
      - develop
  
  # Manual trigger
  workflow_dispatch:

jobs:
  build-android:
    name: Build Android Debug APK
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Check out the code
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Step 2: Setup Java 17
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # Step 3: Setup Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 33
          target: default
          arch: x86_64
      
      # Step 4: Accept Android SDK Licenses
      - name: Accept Android SDK Licenses
        run: yes | sdkmanager --licenses
      
      # Step 5: Install Android SDK Tools
      - name: Install Android SDK Tools
        run: |
          sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.0"
          sdkmanager "ndk;21.4.7075529" "cmake;3.18.1"
      
      # Step 6: Setup Gradle Cache
      - name: Setup Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            mobile/.gradle/caches
            mobile/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('mobile/android/build.gradle', 'mobile/android/gradle.properties', 'mobile/android/app/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      # Step 7: Make Gradlew Executable
      - name: Make Gradlew Executable
        run: |
          cd mobile/android
          chmod +x ./gradlew
      
      # Step 8: Clean Build
      - name: Clean Build
        run: |
          cd mobile/android
          ./gradlew clean --stacktrace --no-daemon
      
      # Step 9: Build Debug APK (First Attempt)
      - name: Build Debug APK
        id: build_apk
        continue-on-error: true
        run: |
          cd mobile/android
          ./gradlew assembleDebug --stacktrace --no-daemon
      
      # Step 10: Build Debug APK (Retry with Refresh Dependencies)
      - name: Build Debug APK (Retry)
        if: steps.build_apk.outcome == 'failure'
        run: |
          cd mobile/android
          ./gradlew assembleDebug --refresh-dependencies --stacktrace --no-daemon
      
      # Step 11: Verify Build Success
      - name: Verify Build Success
        run: |
          if [ ! -d "mobile/android/app/build/outputs/apk/debug" ]; then
            echo "❌ APK build failed - debug directory does not exist"
            exit 1
          fi
          
          if ls mobile/android/app/build/outputs/apk/debug/*.apk 1> /dev/null 2>&1; then
            echo "✅ APK build successful"
            ls -la mobile/android/app/build/outputs/apk/debug/
          else
            echo "❌ APK build failed - no APK files found"
            exit 1
          fi
      
      # Step 12: Upload APK Artifact
      - name: Upload APK as artifact
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: android-debug
          path: mobile/android/app/build/outputs/apk/debug/*.apk
          retention-days: 30
      
      # Step 13: Display Build Information
      - name: Display Build Information
        run: |
          echo "🏗️ Build completed successfully!"
          echo "📱 APK Location: mobile/android/app/build/outputs/apk/debug/"
          echo "📦 Artifact Name: android-debug"
          echo "🔄 Retention: 30 days"
          
          # Display APK details
          for apk in mobile/android/app/build/outputs/apk/debug/*.apk; do
            if [ -f "$apk" ]; then
              echo "📋 APK Details:"
              echo "   File: $(basename "$apk")"
              echo "   Size: $(du -h "$apk" | cut -f1)"
              echo "   Path: $apk"
            fi
          done

  # Optional: Build summary job
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build-android
    if: always()
    
    steps:
      - name: Build Summary
        run: |
          echo "## 📱 Android Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-android.result }}" == "success" ]; then
            echo "✅ **Build Status**: Success" >> $GITHUB_STEP_SUMMARY
            echo "📦 **Artifact**: android-debug" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Build Type**: Debug APK" >> $GITHUB_STEP_SUMMARY
            echo "⏱️ **Retention**: 30 days" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📥 Download Instructions" >> $GITHUB_STEP_SUMMARY
            echo "1. Go to the **Actions** tab" >> $GITHUB_STEP_SUMMARY
            echo "2. Click on this workflow run" >> $GITHUB_STEP_SUMMARY
            echo "3. Scroll down to **Artifacts**" >> $GITHUB_STEP_SUMMARY
            echo "4. Download **android-debug**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Status**: Failed" >> $GITHUB_STEP_SUMMARY
            echo "🔍 **Action Required**: Check build logs for errors" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Build Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **OS**: Ubuntu Latest" >> $GITHUB_STEP_SUMMARY
          echo "- **Java**: 17 (Temurin)" >> $GITHUB_STEP_SUMMARY
          echo "- **Android API**: 33" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Tool**: Gradle" >> $GITHUB_STEP_SUMMARY
          echo "- **Caching**: Enabled" >> $GITHUB_STEP_SUMMARY