 

on:
  # التلقائي عند الدفع على الفروع المحددة أو طلبات السحب
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'bugfix/**'
  pull_request:
    branches:
      - main
      - develop
  # تشغيل يدوي
  workflow_dispatch:

jobs:
  build-android:
    name: Build Android Debug APK
    runs-on: ubuntu-latest

    steps:
      # 1. سحب الكود
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. إعداد Java 17
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. إعداد Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 33
          target: default
          arch: x86_64

      # 4. قبول تراخيص SDK
      - name: Accept Android SDK Licenses
        run: yes | sdkmanager --licenses

      # 5. تثبيت أدوات SDK
      - name: Install SDK Tools
        run: |
          sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.0"
          sdkmanager "ndk;21.4.7075529" "cmake;3.18.1"

      # 6. إعداد كاش Gradle
      - name: Setup Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            mobile/.gradle/caches
            mobile/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('mobile/android/build.gradle', 'mobile/android/gradle.properties', 'mobile/android/app/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 7. توليد الكود باستخدام build_runner
      - name: Generate code with build_runner
        run: |
          cd mobile
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs

      # 8. تنظيف المشروع قبل البناء
      - name: Flutter Clean
        run: |
          cd mobile
          flutter clean

      # 9. بناء ملف APK للمطورين
      - name: Build Debug APK
        id: build_apk
        continue-on-error: true
        run: |
          cd mobile
          flutter build apk --debug --build-name=debug-1 --build-number=1

      # 10. إعادة البناء إذا فشل أول مرة
      - name: Build Debug APK (Retry)
        if: steps.build_apk.outcome == 'failure'
        run: |
          cd mobile
          flutter clean
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs
          flutter build apk --debug --build-name=debug-1 --build-number=1

      # 11. التحقق من نجاح البناء
      - name: Verify Build Success
        run: |
          cd mobile
          if ls build/app/outputs/flutter-apk/*.apk 1> /dev/null 2>&1; then
            echo "✅ APK build successful"
            ls -la build/app/outputs/flutter-apk/
          else
            echo "❌ APK build failed - no APK files found"
            ls -la build/app/outputs/ || true
            exit 1
          fi

      # 12. رفع ملف الـ APK كـ artifact
      - name: Upload APK as artifact
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: android-debug
          path: mobile/build/app/outputs/flutter-apk/*.apk
          retention-days: 30

      # 13. عرض معلومات البناء
      - name: Display Build Information
        run: |
          echo "🏗️ Build completed successfully!"
          echo "📱 APK Location: mobile/build/app/outputs/flutter-apk/"
          echo "📦 Artifact Name: android-debug"
          echo "🔄 Retention: 30 days"
          cd mobile
          for apk in build/app/outputs/flutter-apk/*.apk; do
            if [ -f "$apk" ]; then
              echo "📋 APK Details:"
              echo "   File: $(basename "$apk")"
              echo "   Size: $(du -h "$apk" | cut -f1)"
              echo "   Path: $apk"
            fi
          done
