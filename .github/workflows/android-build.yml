# بناء APK أندرويد لمشروع Flutter عبر GitHub Actions
# هذا الـ Workflow يقوم بإعداد بيئة Flutter و Android SDK ثم يبني ملف APK (debug)
# تم كتابة التعليقات والخطوات باللغة العربية لسهولة الفهم والمتابعة

name: Android Debug APK Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # تشغيل يدوي
  workflow_dispatch:

jobs:
  build-android:
    name: Build Android APK (Debug)
    runs-on: ubuntu-latest
    timeout-minutes: 30 # مهلة قصوى للـ job (30 دقيقة)

    # ضبط مجلد العمل الافتراضي ليكون داخل تطبيق Flutter (mobile/)
    defaults:
      run:
        working-directory: mobile

    env:
      # متغيرات عامة مفيدة أثناء البناء
      JAVA_TOOL_OPTIONS: -Xmx3g -Dfile.encoding=UTF-8

    steps:
      # 1) جلب الشفرة المصدرية
      - name: التحقق من الشفرة المصدرية (Checkout)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # للاحتفاظ بسجل الـ git الكامل عند الحاجة للتصحيح

      # 2) تثبيت Java 17 (توزيعة Temurin) + تفعيل كاش Gradle
      - name: إعداد Java 17 (Temurin) مع كاش Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'gradle'

      - name: عرض معلومات Java
        run: |
          set -euxo pipefail
          java -version
          echo "JAVA_HOME=$JAVA_HOME"
        shell: bash

      # 3) تثبيت Flutter 3.24.0 (قناة stable) مع التخزين المؤقت
      - name: تثبيت Flutter 3.24.0 (stable) مع الكاش
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'
          cache: true

      - name: التحقق من إعداد Flutter
        run: |
          set -euxo pipefail
          flutter --version
          flutter doctor -v
        shell: bash

      # 4) تثبيت Android SDK + cmdline-tools وإعداد متغيرات البيئة
      - name: تثبيت Android SDK و cmdline-tools وإعداد ANDROID_HOME
        run: |
          set -euxo pipefail
          ANDROID_SDK_ROOT="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"

          echo "تنزيل Android cmdline-tools ..."
          curl -fsSL -o /tmp/cmdline-tools.zip \
            https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip

          echo "فك الضغط وتثبيت cmdline-tools ..."
          unzip -q /tmp/cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"

          # تعريف متغيرات البيئة لباقي الخطوات
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/emulator" >> $GITHUB_PATH

          echo "قبول التراخيص وتثبيت الحزم الأساسية ..."
          yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses
          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            "cmdline-tools;latest"

          echo "معلومات SDK مثبتة:"
          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --list | head -n 60 || true
        shell: bash
        timeout-minutes: 10

      - name: طباعة مسارات ANDROID_HOME و PATH (للمهندسين)
        run: |
          set -euxo pipefail
          echo "ANDROID_HOME=$ANDROID_HOME"
          which sdkmanager || true
          sdkmanager --version || true
        shell: bash

      # 5) تفعيل كاش pub (اعتماديات Dart/Flutter) لتسريع البناء
      - name: تهيئة الكاش لاعتماديات pub
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            mobile/.dart_tool
          key: pub-${{ runner.os }}-${{ hashFiles('mobile/pubspec.lock') }}
          restore-keys: |
            pub-${{ runner.os }}-

      # 6) مزامنة Gradle Wrapper (اختياري للمساعدة في تنزيل توزيعة Gradle مبكرًا)
      - name: مزامنة Gradle Wrapper (اختياري)
        run: |
          set -euxo pipefail
          chmod +x android/gradlew
          ./android/gradlew --no-daemon -v || true
        shell: bash
        timeout-minutes: 5

      # 7) تنظيف المشروع
      - name: تنظيف المشروع (flutter clean)
        run: |
          set -euxo pipefail
          flutter clean --verbose || true
        shell: bash
        timeout-minutes: 5

      # 8) جلب الاعتماديات
      - name: تثبيت الاعتماديات (flutter pub get)
        run: |
          set -euxo pipefail
          flutter pub get --verbose
        shell: bash
        timeout-minutes: 10

      # 9) فحص الكود (اختياري) — لا يفشل الـ build عند وجود تحذيرات
      - name: فحص الكود (اختياري) flutter analyze
        run: |
          set -euxo pipefail
          flutter analyze || true
        shell: bash
        timeout-minutes: 5
        continue-on-error: true

      # 10) بناء APK (debug) مع تفعيل stacktrace لتسهيل التصحيح
      - name: بناء APK (debug) مع stacktrace
        run: |
          set -euxo pipefail
          flutter build apk --debug --stacktrace -v
        shell: bash
        timeout-minutes: 20

      # 11) التحقق من نجاح البناء وإظهار معلومات الملف الناتج
      - name: التحقق من الملف الناتج
        run: |
          set -euxo pipefail
          ls -lah build/app/outputs/flutter-apk || true
          test -f build/app/outputs/flutter-apk/app-debug.apk
          echo "تم إنشاء APK بنجاح: build/app/outputs/flutter-apk/app-debug.apk"
        shell: bash

      # 12) رفع ملف الـ APK كـ Artifact مع فترة احتفاظ مناسبة
      - name: رفع ملف الـ APK كـ Artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter-apk
          path: mobile/build/app/outputs/flutter-apk/app-debug.apk
          retention-days: 7
