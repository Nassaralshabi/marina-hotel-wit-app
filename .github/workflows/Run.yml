name: Build Marina Hotel APK

on:
  push:
    branches: [ main, develop, mobile-system-implementation-* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name for the APK'
        required: false
        default: '1.0.0'
      build_type:
        description: 'Build type (debug/release)'
        required: false
        default: 'debug'
        type: choice
        options:
        - debug
        - release

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      BUILD_TYPE: ${{ github.event.inputs.build_type || 'debug' }}
      VERSION_NAME: ${{ github.event.inputs.version_name || '1.0.0' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Display build information
      run: |
        echo "Building Marina Hotel APK"
        echo "Build Type: $BUILD_TYPE"
        echo "Version: $VERSION_NAME"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Setup Android project structure
      run: |
        echo "Creating Android project structure..."
        mkdir -p android_app/app
        mkdir -p android_app/src/main/java/com/marinahotel/app
        mkdir -p android_app/src/main/res/layout
        mkdir -p android_app/src/main/res/values
        mkdir -p android_app/src/main/res/xml
        mkdir -p android_app/src/main/res/mipmap-hdpi
        mkdir -p android_app/src/main/res/mipmap-mdpi
        mkdir -p android_app/src/main/res/mipmap-xhdpi
        mkdir -p android_app/src/main/res/mipmap-xxhdpi
        mkdir -p android_app/src/main/res/mipmap-xxxhdpi
        mkdir -p android_app/src/main/assets
        
        # gradle.properties
        cat > android_app/gradle.properties << 'EOF'
        org.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8
        org.gradle.parallel=true
        org.gradle.caching=true
        org.gradle.configureondemand=true
        android.useAndroidX=true
        android.enableJetifier=true
        android.nonTransitiveRClass=true
        android.nonFinalResIds=true
        EOF
        
        # settings.gradle
        cat > android_app/settings.gradle << 'EOF'
        pluginManagement {
            repositories {
                google()
                mavenCentral()
                gradlePluginPortal()
            }
        }
        dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories {
                google()
                mavenCentral()
            }
        }
        include ':app'
        rootProject.name = 'Marina Hotel'
        EOF
        
        # Root build.gradle
        cat > android_app/build.gradle << 'EOF'
        buildscript {
            ext {
                compileSdkVersion = 34
                targetSdkVersion = 34
                minSdkVersion = 21
                buildToolsVersion = "34.0.0"
                
                androidxAppCompatVersion = "1.6.1"
                materialVersion = "1.11.0"
                constraintLayoutVersion = "2.1.4"
                swipeRefreshLayoutVersion = "1.1.0"
            }
            
            repositories {
                google()
                mavenCentral()
            }
            
            dependencies {
                classpath 'com.android.tools.build:gradle:8.2.0'
            }
        }
        
        plugins {
            id 'com.android.application' version '8.2.0' apply false
        }
        
        task clean(type: Delete) {
            delete rootProject.buildDir
        }
        EOF

        # App build.gradle
        cat > android_app/app/build.gradle << EOF
        plugins {
            id 'com.android.application'
        }
        
        android {
            namespace 'com.marinahotel.app'
            compileSdk rootProject.ext.compileSdkVersion
        
            defaultConfig {
                applicationId "com.marinahotel.app"
                minSdk rootProject.ext.minSdkVersion
                targetSdk rootProject.ext.targetSdkVersion
                versionCode ${{ github.run_number }}
                versionName "$VERSION_NAME"
        
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                
                resConfigs "ar", "en"
                buildConfigField "boolean", "DEBUG_WEBVIEW", "true"
                buildConfigField "String", "SERVER_URL", "\\"https://marinahotel.app\\""
            }
        
            buildTypes {
                debug {
                    applicationIdSuffix ".debug"
                    debuggable true
                    minifyEnabled false
                    shrinkResources false
                    buildConfigField "boolean", "DEBUG_WEBVIEW", "true"
                }
                
                release {
                    minifyEnabled true
                    shrinkResources true
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    buildConfigField "boolean", "DEBUG_WEBVIEW", "false"
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_17
                targetCompatibility JavaVersion.VERSION_17
            }
            
            buildFeatures {
                buildConfig true
            }
            
            packagingOptions {
                resources {
                    excludes += ['/META-INF/{AL2.0,LGPL2.1}']
                }
            }
        }
        
        dependencies {
            implementation "androidx.appcompat:appcompat:\$rootProject.ext.androidxAppCompatVersion"
            implementation "com.google.android.material:material:\$rootProject.ext.materialVersion"
            implementation "androidx.constraintlayout:constraintlayout:\$rootProject.ext.constraintLayoutVersion"
            implementation "androidx.swiperefreshlayout:swiperefreshlayout:\$rootProject.ext.swipeRefreshLayoutVersion"
            
            implementation 'androidx.webkit:webkit:1.9.0'
            implementation 'androidx.browser:browser:1.7.0'
            implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
            implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
            implementation 'androidx.work:work-runtime:2.9.0'
            implementation 'androidx.preference:preference:1.2.1'
            implementation 'androidx.security:security-crypto:1.1.0-alpha06'
            testImplementation 'junit:junit:4.13.2'
            androidTestImplementation 'androidx.test.ext:junit:1.1.5'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        }
        EOF

    - name: Create Gradle Wrapper
      run: |
        cd android_app
        gradle wrapper --gradle-version 8.5 --distribution-type all
        
    - name: Make gradlew executable
      run: chmod +x android_app/gradlew
      
    - name: Clean project
      run: |
        cd android_app
        ./gradlew clean --stacktrace
      
    - name: Create app icons
      run: |
        for density in hdpi mdpi xhdpi xxhdpi xxxhdpi; do
          mkdir -p android_app/src/main/res/mipmap-$density
          touch android_app/src/main/res/mipmap-$density/ic_launcher.png
          touch android_app/src/main/res/mipmap-$density/ic_launcher_round.png
        done
        
    - name: Create themes and styles
      run: |
        cat > android_app/src/main/res/values/themes.xml << 'EOF'
        <resources xmlns:tools="http://schemas.android.com/tools">
            <style name="Theme.MarinaHotel" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
                <item name="colorPrimary">@color/marina_blue</item>
                <item name="colorPrimaryVariant">@color/marina_blue_dark</item>
                <item name="colorOnPrimary">@color/white</item>
                <item name="colorSecondary">@color/marina_gold</item>
                <item name="colorSecondaryVariant">@color/marina_gold_dark</item>
                <item name="colorOnSecondary">@color/black</item>
                <item name="android:statusBarColor" tools:targetApi="l">?attr/colorPrimaryVariant</item>
            </style>
            <style name="Theme.MarinaHotel.NoActionBar">
                <item name="windowActionBar">false</item>
                <item name="windowNoTitle">true</item>
            </style>
            <style name="Theme.MarinaHotel.Splash" parent="Theme.MarinaHotel.NoActionBar">
                <item name="android:windowBackground">@color/marina_blue</item>
                <item name="android:windowFullscreen">true</item>
            </style>
        </resources>
        EOF
        
    - name: Create XML resources
      run: |
        mkdir -p android_app/src/main/res/xml
        
        cat > android_app/src/main/res/xml/backup_rules.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <full-backup-content>
        </full-backup-content>
        EOF
        
        cat > android_app/src/main/res/xml/data_extraction_rules.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <data-extraction-rules>
            <cloud-backup>
                <include domain="sharedpref" path="."/>
                <exclude domain="sharedpref" path="device.xml"/>
            </cloud-backup>
            <device-transfer>
                <include domain="sharedpref" path="."/>
                <exclude domain="sharedpref" path="device.xml"/>
            </device-transfer>
        </data-extraction-rules>
        EOF
        
        cat > android_app/src/main/res/xml/file_paths.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <paths xmlns:android="http://schemas.android.com/apk/res/android">
            <external-path name="external_files" path="."/>
        </paths>
        EOF
        
    - name: Build APK
      run: |
        cd android_app
        if [ "$BUILD_TYPE" = "release" ]; then
          ./gradlew assembleRelease --stacktrace --info
          APK_PATH="app/build/outputs/apk/release/app-release.apk"
        else
          ./gradlew assembleDebug --stacktrace --info
          APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
        fi
        echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
        if [ -f "$APK_PATH" ]; then
          echo "APK built successfully: $APK_PATH"
          ls -la "$APK_PATH"
          file "$APK_PATH"
          du -h "$APK_PATH"
        else
          echo "APK build failed - file not found: $APK_PATH"
          exit 1
        fi
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: marina-hotel-${{ env.BUILD_TYPE }}-apk-v${{ env.VERSION_NAME }}
        path: android_app/${{ env.APK_PATH }}
        retention-days: 30
        
    - name: Generate build summary
      run: |
        echo "## Marina Hotel APK Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Type:** $BUILD_TYPE" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** $VERSION_NAME" >> $GITHUB_STEP_SUMMARY
        echo "- **Version Code:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### APK Information" >> $GITHUB_STEP_SUMMARY
        cd android_app
        if [ -f "$APK_PATH" ]; then
          APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
          echo "- **APK Size:** $APK_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Path:** $APK_PATH" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          echo "Build completed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          echo "Build failed!" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION_NAME }}-${{ github.run_number }}
        name: Marina Hotel Mobile v${{ env.VERSION_NAME }}
        body: |
          ## Marina Hotel Mobile App - Hotel Management System
          ### New Features:
          - Native Android app with optimized WebView
          - Real-time data synchronization
          - Offline support with local caching
          - Complete hotel management functionality
          - Enhanced Arabic RTL interface
          - Enhanced security with data encryption
          - Material Design 3 UI
          - Push notifications support
          ### Installation:
          1. Download the APK file
          2. Enable "Install from unknown sources" in Android settings
          3. Install the APK
          4. Configure your server URL in app settings
          ### Technical Details:
          - **Minimum Android:** 5.0 (API 21)
          - **Target Android:** 14 (API 34)
          - **App Size:** ~8-15 MB
          - **Permissions:** Internet, camera (optional)
          - **Build Type:** ${{ env.BUILD_TYPE }}
          - **Version Code:** ${{ github.run_number }}
          ### Requirements:
          - Android 5.0+ device
          - Internet connection for sync
          - 50MB storage space
          ---
          **Built automatically by GitHub Actions**
        files: android_app/${{ env.APK_PATH }}
        draft: false
        prerelease: ${{ github.ref != 'refs/heads/main' }}
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'android_app/${{ env.APK_PATH }}';
          let apkSize = 'Unknown';
          try {
            const stats = fs.statSync(path);
            apkSize = (stats.size / (1024 * 1024)).toFixed(2) + ' MB';
          } catch (e) {
            console.log('Could not get APK size:', e.message);
          }
          const comment = `## Marina Hotel APK Build Results
          ### Build Successful!
          **APK Details:**
          - **Build Type:** ${{ env.BUILD_TYPE }}
          - **Version:** ${{ env.VERSION_NAME }}
          - **Size:** ${apkSize}
          - **Download:** [APK Artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          **Build Info:**
          - **Commit:** ${{ github.sha }}
          - **Branch:** ${{ github.ref_name }}
          - **Run:** #${{ github.run_number }}
          The APK has been built successfully and is available for download from the Actions artifacts.`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
