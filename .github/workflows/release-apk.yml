name: Release Android (APK/AAB)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-release:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: mobile
    steps:
      - uses: actions/checkout@v4
      
      - name: 🧹 تنظيف الكاش القديم (عند workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "🧹 تنظيف gradle cache..."
          rm -rf ~/.gradle/caches/ 2>/dev/null || true
          rm -rf ~/.gradle/wrapper/ 2>/dev/null || true
          echo "✅ تم تنظيف الكاش"
      
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.24.0'
          cache: true
      - name: 🔍 فحص المتطلبات والبيئة
        run: |
          echo "=== 🔍 فحص المتطلبات ==="
          echo ""
          echo "📱 Flutter SDK:"
          which flutter && flutter --version || echo "❌ Flutter not found"
          echo ""
          echo "☕ Java version:"
          java -version 2>&1 | head -3
          echo ""
          echo "💾 Available disk space:"
          df -h | grep -E '^Filesystem|/$'
          echo ""
          echo "✅ فحص المتطلبات مكتمل"
      
      - name: Install dependencies
        run: |
          flutter --version
          flutter pub get
          flutter packages pub run build_runner build --delete-conflicting-outputs
      - name: Prepare signing
        if: ${{ secrets.KEYSTORE_BASE64 != '' }}
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > android/upload-keystore.jks
          cat > android/key.properties <<EOF
          storeFile=upload-keystore.jks
          storePassword=$KEYSTORE_PASSWORD
          keyAlias=$KEY_ALIAS
          keyPassword=$KEY_PASSWORD
          EOF
      - name: Compute version
        id: ver
        run: |
          VERSION_NAME=$(grep '^version:' pubspec.yaml | awk '{print $2}' | cut -d'+' -f1)
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          DATE=$(date -u +'%Y%m%d')
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT
      - name: Build APK (release, split per ABI)
        timeout-minutes: 25
        run: |
          echo "📱 بدء بناء Release APKs..."
          echo "📊 رقم الإصدار: ${{ steps.ver.outputs.build_number }}"
          echo ""
          
          set +e
          flutter build apk --release \
            --build-number "${{ steps.ver.outputs.build_number }}" \
            --target-platform android-arm,android-arm64,android-x64 \
            --split-per-abi \
            --verbose
          
          BUILD_EXIT_CODE=$?
          set -e
          
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo ""
            echo "❌ فشل بناف Release APKs"
            echo "================================"
            echo ""
            echo "📂 محتويات build:"
            find build -type f 2>/dev/null | head -30 || true
            echo ""
            echo "📋 Gradle logs:"
            find android/.gradle -name "*.log" -type f -exec tail -100 {} \; 2>/dev/null || true
            echo ""
            exit 1
          fi
          
          echo "✅ تم بناء Release APKs بنجاح"
          ls -lh build/app/outputs/flutter-apk/*-release.apk
      - name: Build AAB (release)
        run: |
          flutter build appbundle --release --build-number "${{ steps.ver.outputs.build_number }}"
      - name: Collect artifacts
        run: |
          mkdir -p ../releases/apk
          for f in build/app/outputs/flutter-apk/*-release.apk; do
            base=$(basename "$f")
            abi=""
            case "$base" in
              *arm64-v8a*) abi="arm64" ;;
              *armeabi-v7a*) abi="armv7" ;;
              *x86_64*) abi="x86_64" ;;
            esac
            cp "$f" "../releases/apk/marina-hotel-v${{ steps.ver.outputs.version_name }}-${abi}.apk"
          done
          cp build/app/outputs/bundle/release/app-release.aab "../releases/apk/marina-hotel-v${{ steps.ver.outputs.version_name }}.aab"
      - name: ✅ فحص صحة APKs النهائي
        run: |
          echo "🔍 فحص صحة APKs المُنتَجة..."
          echo "================================"
          set -e
          cd ../releases/apk
          
          for f in *.apk; do
            echo ""
            echo "📦 فحص: $f"
            
            # فحص الحجم
            SIZE=$(stat -c%s "$f" 2>/dev/null || stat -f%z "$f")
            MIN_SIZE=10000000  # 10 MB للـ release
            
            if [ "$SIZE" -lt "$MIN_SIZE" ]; then
              echo "❌ فشل: حجم APK صغير جداً ($SIZE bytes < $MIN_SIZE bytes)"
              exit 1
            fi
            echo "  ✓ الحجم: $SIZE bytes"
            
            # فحص أن الملف APK صحيح (Zip archive)
            if ! file "$f" | grep -q "Zip archive"; then
              echo "❌ فشل: الملف ليس APK صحيح"
              file "$f"
              exit 1
            fi
            echo "  ✓ نوع الملف: Zip archive"
            
            # فحص محتويات APK
            unzip -l "$f" >/dev/null
            if ! unzip -l "$f" | grep -q AndroidManifest.xml; then
              echo "❌ فشل: AndroidManifest.xml غير موجود في $f"
              exit 1
            fi
            echo "  ✓ AndroidManifest.xml موجود"
            
            echo "✅ $f صحيح"
          done
          
          echo ""
          echo "================================"
          echo "✅ جميع APKs صحيحة وجاهزة للإصدار"
      - name: Generate checksums and notes
        id: meta
        run: |
          cd ../releases/apk
          echo "assets<<EOF" >> $GITHUB_OUTPUT
          echo "date_utc,version,build_number,file,size_bytes,sha256" > metadata.csv
          NOW=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          for f in *; do
            size=$(stat -c%s "$f" 2>/dev/null || stat -f%z "$f")
            sha=$(sha256sum "$f" 2>/dev/null | awk '{print $1}')
            if [ -z "$sha" ]; then sha=$(shasum -a 256 "$f" | awk '{print $1}'); fi
            echo "$f,$size,$sha" >> $GITHUB_OUTPUT
            echo "$NOW,${{ steps.ver.outputs.version_name }},${{ steps.ver.outputs.build_number }},$f,$size,$sha" >> metadata.csv
          done
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Render release notes
        run: |
          TEMPLATE="../.github/release_notes_template.md"
          ASSETS_MD=""
          while IFS=, read -r name size sha; do
            [ -z "$name" ] && continue
            human=$(numfmt --to=iec "$size" 2>/dev/null || echo "$size B")
            ASSETS_MD="$ASSETS_MD\n- $name — $human — sha256: \`$sha\`"
          done <<< "${{ steps.meta.outputs.assets }}"
          sed \
            -e "s/{{VERSION}}/${{ steps.ver.outputs.version_name }}/g" \
            -e "s/{{BUILD_NUMBER}}/${{ steps.ver.outputs.build_number }}/g" \
            -e "s/{{DATE}}/${{ steps.ver.outputs.date }}/g" \
            -e "s|{{ASSETS}}|$ASSETS_MD|g" "$TEMPLATE" > ../releases/RELEASE_NOTES.md
      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Marina Hotel v${{ steps.ver.outputs.version_name }}
          body_path: releases/RELEASE_NOTES.md
          files: |
            releases/apk/*.apk
            releases/apk/*.aab
      - uses: actions/upload-artifact@v4
        with:
          name: apk-release-${{ steps.ver.outputs.version_name }}-${{ github.run_number }}
          path: |
            releases/apk/*
            releases/RELEASE_NOTES.md
            releases/apk/metadata.csv
          retention-days: 30
