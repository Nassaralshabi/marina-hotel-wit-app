name: Android Release Build

on:
  push:
    branches: 
      - main
      - develop
      - 'release/**'
    tags:
      - 'v*'
  pull_request:
    branches: 
      - main
      - develop
  workflow_dispatch:
    inputs:
      base_api_url:
        description: 'BASE_API_URL for build (optional)'
        required: false
        default: ''

jobs:
  build-release:
    name: Build Release APK
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      FLUTTER_VERSION: '3.22.2'
      JAVA_VERSION: '17'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Flutter Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            mobile/.dart_tool
            mobile/build
          key: ${{ runner.os }}-flutter-${{ hashFiles('mobile/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            mobile/android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('mobile/android/gradle/wrapper/gradle-wrapper.properties', 'mobile/android/build.gradle', 'mobile/android/app/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Verify Flutter Installation
        run: |
          flutter doctor -v
          flutter --version

      - name: Verify Project Structure
        working-directory: mobile
        run: |
          echo "Checking mobile directory structure..."
          ls -la
          if [ ! -d "android" ]; then
            echo "❌ Error: Android directory not found in mobile/"
            exit 1
          fi
          echo "✅ Android directory found"
          if [ ! -f "pubspec.yaml" ]; then
            echo "❌ Error: pubspec.yaml not found in mobile/"
            exit 1
          fi
          echo "✅ pubspec.yaml found"

      - name: Get Flutter Dependencies
        working-directory: mobile
        run: |
          echo "Installing Flutter dependencies..."
          flutter pub get
          echo "✅ Dependencies installed successfully"

      - name: Run Code Generation
        working-directory: mobile
        run: |
          echo "Running code generation..."
          flutter pub run build_runner build --delete-conflicting-outputs
          echo "✅ Code generation completed"

      - name: Setup Release Signing (if secrets available)
        if: env.KEYSTORE_BASE64 != ''
        working-directory: mobile/android
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "Setting up release signing..."
          if [ -n "$KEYSTORE_BASE64" ] && [ -n "$KEYSTORE_PASSWORD" ] && [ -n "$KEY_ALIAS" ] && [ -n "$KEY_PASSWORD" ]; then
            echo "$KEYSTORE_BASE64" | base64 -d > app/upload-keystore.jks
            cat > key.properties << EOF
          storePassword=$KEYSTORE_PASSWORD
          keyPassword=$KEY_PASSWORD
          keyAlias=$KEY_ALIAS
          storeFile=app/upload-keystore.jks
          EOF
            echo "✅ Release signing configured"
          else
            echo "⚠️  Some signing secrets are missing - will use debug signing"
          fi

      - name: Build Release APK
        working-directory: mobile
        env:
          BASE_API_URL: ${{ github.event.inputs.base_api_url || secrets.BASE_API_URL || 'https://api.marinaplaza.com/v1' }}
        run: |
          echo "Building release APK..."
          echo "Using BASE_API_URL: $BASE_API_URL"
          flutter build apk --release \
            --dart-define=BASE_API_URL=$BASE_API_URL \
            --build-name=${{ github.run_number }} \
            --build-number=${{ github.run_number }}
          
          # Verify APK was created
          APK_PATH="build/app/outputs/flutter-apk/app-release.apk"
          if [ -f "$APK_PATH" ]; then
            echo "✅ APK built successfully"
            ls -lh "$APK_PATH"
            echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
          else
            echo "❌ APK build failed - file not found: $APK_PATH"
            exit 1
          fi

      - name: Generate APK Info
        working-directory: mobile
        run: |
          APK_SIZE=$(du -h build/app/outputs/flutter-apk/app-release.apk | cut -f1)
          echo "APK_SIZE=$APK_SIZE" >> $GITHUB_ENV
          
          # Generate build info
          BUILD_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
          
          # Get commit info
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          echo "COMMIT_SHORT=$COMMIT_SHORT" >> $GITHUB_ENV

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: marina-hotel-release-v${{ github.run_number }}-${{ env.COMMIT_SHORT }}
          path: mobile/build/app/outputs/flutter-apk/app-release.apk
          retention-days: 30

      - name: Create GitHub Release (for tags)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: mobile/build/app/outputs/flutter-apk/app-release.apk
          body: |
            ## Marina Hotel Mobile App - Release APK
            
            **Build Information:**
            - Version: ${{ github.ref_name }}
            - Build Number: ${{ github.run_number }}
            - Build Time: ${{ env.BUILD_TIME }}
            - Commit: ${{ env.COMMIT_SHORT }}
            - APK Size: ${{ env.APK_SIZE }}
            
            **Installation:**
            1. Download the APK file
            2. Enable "Install from unknown sources" in your Android settings
            3. Install the APK file
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}

      - name: Build Summary
        if: always()
        run: |
          echo "## 🚀 Marina Hotel Android Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type:** Release APK" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ env.COMMIT_SHORT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time:** ${{ env.BUILD_TIME }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ env.APK_SIZE }}" ]; then
            echo "### APK Information" >> $GITHUB_STEP_SUMMARY
            echo "- **APK Size:** ${{ env.APK_SIZE }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Build Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Build Status" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Download" >> $GITHUB_STEP_SUMMARY
          echo "The release APK is available in the workflow artifacts." >> $GITHUB_STEP_SUMMARY