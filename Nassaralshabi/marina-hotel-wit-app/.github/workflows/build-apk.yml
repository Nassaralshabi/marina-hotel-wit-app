name: 🏨 Marina Hotel - Build APK

on:
  push:
    branches: [ main, develop, capy/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - debug
          - staging
          - release
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: false
        type: boolean

env:
  # Build configuration
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
  
jobs:
  build:
    name: 🔨 Build APK
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🤖 Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0
        
    - name: 📱 Accept Android SDK licenses
      run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
      
    - name: 🗂️ Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.android/build-cache
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🔑 Setup Keystore from Base64
      run: |
        echo "Setting up keystore for signing..."
        
        # Create keystore from base64 secret
        if [ ! -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/release.keystore
          echo "✅ Keystore created from secret"
        else
          echo "⚠️ Using embedded keystore (for demo purposes)"
          # Use the base64 keystore from keystore.properties.template
          KEYSTORE_BASE64="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"
          echo "$KEYSTORE_BASE64" | base64 -d > app/release.keystore
          echo "✅ Using embedded keystore"
        fi
        
        # Set secure permissions
        chmod 600 app/release.keystore
        
        # Verify keystore
        ls -la app/release.keystore
        echo "🔐 Keystore ready for signing"
        
    - name: 🧹 Clean previous builds
      run: ./gradlew clean
      
    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 🏗️ Build Debug APK
      if: ${{ github.event_name == 'pull_request' || github.event.inputs.build_type == 'debug' }}
      run: |
        echo "🔨 Building Debug APK..."
        ./gradlew assembleDebug
        
    - name: 🏗️ Build Staging APK  
      if: ${{ contains(github.ref, 'develop') || github.event.inputs.build_type == 'staging' }}
      run: |
        echo "🔨 Building Staging APK..."
        ./gradlew assembleStaging
      env:
        MARINA_KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD || 'Marina2024!SecureKey789' }}
        MARINA_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD || 'HotelApp@2024#Strong456' }}
        MARINA_KEY_ALIAS: ${{ secrets.KEY_ALIAS || 'marina-hotel-key' }}
        
    - name: 🚀 Build Release APK
      if: ${{ contains(github.ref, 'refs/heads/main') || contains(github.ref, 'refs/tags/v') || github.event.inputs.build_type == 'release' }}
      run: |
        echo "🚀 Building Release APK..."
        ./gradlew assembleRelease
      env:
        MARINA_KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD || 'Marina2024!SecureKey789' }}
        MARINA_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD || 'HotelApp@2024#Strong456' }}
        MARINA_KEY_ALIAS: ${{ secrets.KEY_ALIAS || 'marina-hotel-key' }}
        
    - name: 📏 Analyze APK Size
      if: always()
      run: |
        echo "📊 APK Size Analysis:"
        echo "===================="
        
        # Find all built APKs
        find app/build/outputs/apk -name "*.apk" -type f | while read apk; do
          size=$(du -h "$apk" | cut -f1)
          echo "📱 $(basename "$apk"): $size"
        done
        
        # Detailed analysis for release APK
        if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
          echo
          echo "🔍 Release APK Details:"
          unzip -l app/build/outputs/apk/release/app-release.apk | head -20
        fi
        
    - name: 🔒 Verify APK Signing
      if: always()
      run: |
        echo "🔒 Verifying APK Signatures:"
        echo "============================"
        
        # Check all APKs
        find app/build/outputs/apk -name "*.apk" -type f | while read apk; do
          echo
          echo "🔍 Checking: $(basename "$apk")"
          
          # Verify signature
          if jarsigner -verify -verbose -certs "$apk" > /dev/null 2>&1; then
            echo "✅ Signature: VALID"
          else
            echo "❌ Signature: INVALID"
          fi
          
          # Show certificate info
          echo "📋 Certificate:"
          keytool -printcert -jarfile "$apk" 2>/dev/null | head -10 || echo "No certificate info available"
        done
        
    - name: 📤 Upload Debug APK
      if: ${{ github.event_name == 'pull_request' || github.event.inputs.build_type == 'debug' }}
      uses: actions/upload-artifact@v4
      with:
        name: marina-hotel-debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
        retention-days: 7
        
    - name: 📤 Upload Staging APK
      if: ${{ contains(github.ref, 'develop') || github.event.inputs.build_type == 'staging' }}
      uses: actions/upload-artifact@v4
      with:
        name: marina-hotel-staging-apk
        path: app/build/outputs/apk/staging/app-staging.apk
        retention-days: 14
        
    - name: 📤 Upload Release APK
      if: ${{ contains(github.ref, 'refs/heads/main') || contains(github.ref, 'refs/tags/v') || github.event.inputs.build_type == 'release' }}
      uses: actions/upload-artifact@v4
      with:
        name: marina-hotel-release-apk
        path: app/build/outputs/apk/release/app-release.apk
        retention-days: 30
        
    - name: 🏷️ Generate Build Info
      if: always()
      run: |
        echo "📋 Build Information" > build-info.txt
        echo "===================" >> build-info.txt
        echo "Build Date: $(date)" >> build-info.txt
        echo "Commit: $GITHUB_SHA" >> build-info.txt
        echo "Branch: $GITHUB_REF" >> build-info.txt
        echo "Actor: $GITHUB_ACTOR" >> build-info.txt
        echo "" >> build-info.txt
        
        # Add APK info
        echo "📱 Built APKs:" >> build-info.txt
        find app/build/outputs/apk -name "*.apk" -type f | while read apk; do
          size=$(du -h "$apk" | cut -f1)
          echo "  - $(basename "$apk"): $size" >> build-info.txt
        done
        
        echo "" >> build-info.txt
        echo "🔧 Environment:" >> build-info.txt
        echo "  Java: $(java --version | head -1)" >> build-info.txt
        echo "  Gradle: $(./gradlew --version | grep Gradle)" >> build-info.txt
        
        cat build-info.txt
        
    - name: 📤 Upload Build Info
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: marina-hotel-build-info
        path: build-info.txt
        retention-days: 30

  release:
    name: 🎉 Create Release
    needs: build
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true' }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 📥 Download Release APK
      uses: actions/download-artifact@v4
      with:
        name: marina-hotel-release-apk
        path: ./apk
        
    - name: 📥 Download Build Info
      uses: actions/download-artifact@v4
      with:
        name: marina-hotel-build-info
        path: ./info
        
    - name: 🏷️ Get version info
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="v$(date +'%Y%m%d%H%M%S')"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: 📄 Generate Release Notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## 🏨 Marina Hotel Android - ${{ steps.version.outputs.version }}
        
        ### 📱 What's New
        - Latest stable release of Marina Hotel management app
        - Enhanced security with ProGuard obfuscation
        - Optimized APK size and performance
        - Full RTL support for Arabic interface
        
        ### 🔧 Technical Details
        - **Package ID**: com.marinahotel.kotlin
        - **Min SDK**: Android 7.0 (API 24)
        - **Target SDK**: Android 14 (API 34)
        - **Architecture**: Universal APK
        - **Signing**: Production keystore
        
        ### 📦 Downloads
        - **APK Size**: ~$(du -h ./apk/app-release.apk | cut -f1)
        - **Build Date**: $(date +'%Y-%m-%d %H:%M:%S UTC')
        - **Commit**: ${{ github.sha }}
        
        ### 🛡️ Security Features
        - ✅ ProGuard code obfuscation enabled
        - ✅ Network security config enforced
        - ✅ Certificate pinning for APIs
        - ✅ Secure keystore signing
        
        ### 📲 Installation
        1. Download the APK file below
        2. Enable "Install from unknown sources" on your device
        3. Install the APK and enjoy Marina Hotel management!
        
        ---
        
        **⚠️ Important**: This is a production-ready release. Please backup your data before updating.
        EOF
        
    - name: 🎉 Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.version.outputs.version }}
        name: "Marina Hotel v${{ steps.version.outputs.version }}"
        bodyFile: release_notes.md
        artifacts: "./apk/app-release.apk,./info/build-info.txt"
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}